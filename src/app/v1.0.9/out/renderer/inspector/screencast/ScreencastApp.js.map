{"version":3,"file":"ScreencastApp.js","sourceRoot":"","sources":["../../../../../front_end/screencast/ScreencastApp.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as SDK from '../sdk/sdk.js';\nimport * as UI from '../ui/ui.js';\n\nimport {ScreencastView} from './ScreencastView.js';\n\n/** @type {!ScreencastApp} */\nlet _appInstance;\n\n/**\n * @implements {Common.App.App}\n * @implements {SDK.SDKModel.SDKModelObserver<!SDK.ScreenCaptureModel.ScreenCaptureModel>}\n */\nexport class ScreencastApp {\n  constructor() {\n    this._enabledSetting = Common.Settings.Settings.instance().createSetting('screencastEnabled', true);\n    this._toggleButton = new UI.Toolbar.ToolbarToggle(Common.UIString.UIString('Toggle screencast'), 'largeicon-phone');\n    this._toggleButton.setToggled(this._enabledSetting.get());\n    this._toggleButton.setEnabled(false);\n    this._toggleButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this._toggleButtonClicked, this);\n    SDK.SDKModel.TargetManager.instance().observeModels(SDK.ScreenCaptureModel.ScreenCaptureModel, this);\n  }\n\n  /**\n   * @return {!ScreencastApp}\n   */\n  static _instance() {\n    if (!_appInstance) {\n      _appInstance = new ScreencastApp();\n    }\n    return _appInstance;\n  }\n\n  /**\n   * @override\n   * @param {!Document} document\n   */\n  presentUI(document) {\n    const rootView = new UI.RootView.RootView();\n\n    this._rootSplitWidget =\n        new UI.SplitWidget.SplitWidget(false, true, 'InspectorView.screencastSplitViewState', 300, 300);\n    this._rootSplitWidget.setVertical(true);\n    this._rootSplitWidget.setSecondIsSidebar(true);\n    this._rootSplitWidget.show(rootView.element);\n    this._rootSplitWidget.hideMain();\n\n    this._rootSplitWidget.setSidebarWidget(UI.InspectorView.InspectorView.instance());\n    UI.InspectorView.InspectorView.instance().setOwnerSplit(this._rootSplitWidget);\n    rootView.attachToDocument(document);\n    rootView.focus();\n  }\n\n  /**\n   * @override\n   * @param {!SDK.ScreenCaptureModel.ScreenCaptureModel} screenCaptureModel\n   */\n  modelAdded(screenCaptureModel) {\n    if (this._screenCaptureModel) {\n      return;\n    }\n    this._screenCaptureModel = screenCaptureModel;\n    this._toggleButton.setEnabled(true);\n    this._screencastView = new ScreencastView(screenCaptureModel);\n    if (this._rootSplitWidget) {\n      this._rootSplitWidget.setMainWidget(this._screencastView);\n    }\n    this._screencastView.initialize();\n    this._onScreencastEnabledChanged();\n  }\n\n  /**\n   * @override\n   * @param {!SDK.ScreenCaptureModel.ScreenCaptureModel} screenCaptureModel\n   */\n  modelRemoved(screenCaptureModel) {\n    if (this._screenCaptureModel !== screenCaptureModel) {\n      return;\n    }\n    delete this._screenCaptureModel;\n    this._toggleButton.setEnabled(false);\n    if (this._screencastView) {\n      this._screencastView.detach();\n      delete this._screencastView;\n    }\n    this._onScreencastEnabledChanged();\n  }\n\n  _toggleButtonClicked() {\n    const enabled = !this._toggleButton.toggled();\n    this._enabledSetting.set(enabled);\n    this._onScreencastEnabledChanged();\n  }\n\n  _onScreencastEnabledChanged() {\n    if (!this._rootSplitWidget) {\n      return;\n    }\n    const enabled = this._enabledSetting.get() && this._screencastView;\n    this._toggleButton.setToggled(enabled);\n    if (enabled) {\n      this._rootSplitWidget.showBoth();\n    } else {\n      this._rootSplitWidget.hideMain();\n    }\n  }\n}\n\n/**\n * @implements {UI.Toolbar.Provider}\n */\nexport class ToolbarButtonProvider {\n  /**\n   * @override\n   * @return {?UI.Toolbar.ToolbarItem}\n   */\n  item() {\n    return ScreencastApp._instance()._toggleButton;\n  }\n}\n\n/**\n * @implements {Common.AppProvider.AppProvider}\n */\nexport class ScreencastAppProvider {\n  /**\n   * @override\n   * @return {!Common.App.App}\n   */\n  createApp() {\n    return ScreencastApp._instance();\n  }\n}\n"]}