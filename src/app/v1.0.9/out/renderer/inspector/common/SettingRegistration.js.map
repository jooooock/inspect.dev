{"version":3,"file":"SettingRegistration.js","sourceRoot":"","sources":["../../../../../front_end/common/SettingRegistration.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,EAAE,EAAC,MAAM,yBAAyB,CAAC;AAC3C,OAAO,KAAK,IAAI,MAAM,iBAAiB,CAAC;AAIxC,MAAM,kBAAkB,GAA+B,EAAE,CAAC;AAE1D,MAAM,UAAU,wBAAwB,CAAC,YAAiC;IACxE,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AACxC,CAAC;AAED,MAAM,UAAU,qBAAqB;IACnC,OAAO,kBAAkB,CAAC,MAAM,CAC5B,OAAO,CAAC,EAAE,CACN,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,EAAC,UAAU,EAAE,OAAO,CAAC,UAAU,EAAE,SAAS,EAAE,OAAO,CAAC,SAAS,EAAC,CAAC,CAAC,CAAC;AACpH,CAAC;AAED,MAAM,CAAC,MAAM,qBAAqB,GAAG;IACnC,QAAQ,EAAE,EAAE,CAAA,UAAU;IACtB,UAAU,EAAE,EAAE,CAAA,YAAY;IAC1B,OAAO,EAAE,EAAE,CAAA,SAAS;IACpB,OAAO,EAAE,EAAE,CAAA,SAAS;IACpB,WAAW,EAAE,EAAE,CAAA,aAAa;IAC5B,OAAO,EAAE,EAAE,CAAA,SAAS;IACpB,WAAW,EAAE,EAAE,CAAA,aAAa;IAC5B,QAAQ,EAAE,EAAE,CAAA,UAAU;IACtB,MAAM,EAAE,EAAE,CAAA,QAAQ;IAClB,SAAS,EAAE,EAAE,CAAA,WAAW;IACxB,IAAI,EAAE,EAAE,CAAA,MAAM;IACd,MAAM,EAAE,EAAE,CAAA,QAAQ;IAClB,SAAS,EAAE,EAAE,CAAA,WAAW;IACxB,MAAM,EAAE,EAAE,CAAA,QAAQ;CACnB,CAAC;AAIF,MAAM,CAAC,MAAM,iBAAiB,GAAG;IAC/B,KAAK,EAAE,OAAO;IACd,KAAK,EAAE,OAAO;IACd,IAAI,EAAE,MAAM;IACZ,OAAO,EAAE,SAAS;CACnB,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {ls} from '../platform/platform.js';\nimport * as Root from '../root/root.js';\n\nimport {SettingStorageType} from './Settings.js';\n\nconst registeredSettings: Array<SettingRegistration> = [];\n\nexport function registerSettingExtension(registration: SettingRegistration): void {\n  registeredSettings.push(registration);\n}\n\nexport function getRegisteredSettings(): Array<SettingRegistration> {\n  return registeredSettings.filter(\n      setting =>\n          Root.Runtime.Runtime.isDescriptorEnabled({experiment: setting.experiment, condition: setting.condition}));\n}\n\nexport const SettingCategoryObject = {\n  ELEMENTS: ls`Elements`,\n  APPEARANCE: ls`Appearance`,\n  SOURCES: ls`Sources`,\n  NETWORK: ls`Network`,\n  PERFORMANCE: ls`Performance`,\n  CONSOLE: ls`Console`,\n  PERSISTENCE: ls`Persistence`,\n  DEBUGGER: ls`Debugger`,\n  GLOBAL: ls`Global`,\n  RENDERING: ls`Rendering`,\n  GRID: ls`Grid`,\n  MOBILE: ls`Mobile`,\n  EMULATION: ls`Emulation`,\n  MEMORY: ls`Memory`,\n};\n\nexport type SettingCategory = typeof SettingCategoryObject[keyof typeof SettingCategoryObject];\n\nexport const SettingTypeObject = {\n  ARRAY: 'array',\n  REGEX: 'regex',\n  ENUM: 'enum',\n  BOOLEAN: 'boolean',\n};\n\nexport type SettingType = typeof SettingTypeObject[keyof typeof SettingTypeObject];\n\nexport interface RegExpSettingItem {\n  pattern: string;\n  disabled?: boolean;\n}\n\nexport interface SettingRegistration {\n  category?: SettingCategory;\n  order?: number;\n  title?: string;\n  titleMac?: string;\n  settingName: string;\n  settingType: SettingType;\n  defaultValue: unknown;\n  tags?: Array<string>;\n  isRegex?: boolean;\n  options?: Array<SettingExtensionOption>;\n  reloadRequired?: boolean;\n  storageType?: SettingStorageType;\n  userActionCondition?: string;\n  experiment?: Root.Runtime.ExperimentName;\n  condition?: Root.Runtime.ConditionName;\n}\n\nexport interface SettingExtensionOption {\n  value: boolean|string;\n  title: string;\n  text?: string;\n  raw?: boolean;\n}\n"]}