{"version":3,"file":"ViewRegistration.js","sourceRoot":"","sources":["../../../../../front_end/ui/ViewRegistration.ts"],"names":[],"mappings":"AAIA,OAAO,KAAK,IAAI,MAAM,iBAAiB,CAAC;AAExC,OAAO,EAAC,iBAAiB,EAAC,MAAM,kBAAkB,CAAC;AAInD,MAAM,wBAAwB,GAA6B,EAAE,CAAC;AAiC9D,MAAM,UAAU,qBAAqB,CAAC,YAA8B;IAClE,wBAAwB,CAAC,IAAI,CAAC,IAAI,iBAAiB,CAAC,YAAY,CAAC,CAAC,CAAC;AACrE,CAAC;AAED,MAAM,UAAU,2BAA2B;IACzC,OAAO,wBAAwB,CAAC,MAAM,CAClC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,EAAC,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,EAAC,CAAC,CAAC,CAAC;AACtH,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Platform from '../platform/platform.js';\nimport * as Root from '../root/root.js';\n\nimport {PreRegisteredView} from './ViewManager.js';\n\nimport type {Widget} from './Widget.js';\n\nconst registeredViewExtensions: Array<PreRegisteredView> = [];\n\nexport const enum ViewPersistence {\n  CLOSEABLE = 'closeable',\n  PERMANENT = 'permanent',\n  TRANSIENT = 'transient',\n}\n\nexport const enum ViewLocationValues {\n  PANEL = 'panel',\n  SETTINGS_VIEW = 'settings-view',\n  ELEMENTS_SIDEBAR = 'elements-sidebar',\n  SOURCES_SIDEBAR_BOTTOM = 'sources.sidebar-bottom',\n  NAVIGATOR_VIEW = 'navigator-view',\n  DRAWER_VIEW = 'drawer-view',\n  NETWORK_SIDEBAR = 'network-sidebar',\n}\n\nexport interface ViewRegistration {\n  experiment?: Root.Runtime.ExperimentName;\n  condition?: Root.Runtime.ConditionName;\n  commandPrompt: string;\n  title: Platform.UIString.LocalizedString;\n  persistence?: ViewPersistence;\n  id: string;\n  location?: ViewLocationValues;\n  hasToolbar?: boolean;\n  loadView: () => Promise<Widget>;\n  order?: number;\n  settings?: Array<string>;\n  tags?: Array<string>;\n}\n\nexport function registerViewExtension(registration: ViewRegistration): void {\n  registeredViewExtensions.push(new PreRegisteredView(registration));\n}\n\nexport function getRegisteredViewExtensions(): Array<PreRegisteredView> {\n  return registeredViewExtensions.filter(\n      view => Root.Runtime.Runtime.isDescriptorEnabled({experiment: view.experiment(), condition: view.condition()}));\n}\n"]}