{"version":3,"file":"ProfileLauncherView.js","sourceRoot":"","sources":["../../../../../front_end/profiler/ProfileLauncherView.js"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../common/common.js';\nimport * as UI from '../ui/ui.js';\n\nimport {IsolateSelector} from './IsolateSelector.js';\nimport {ProfileType} from './ProfileHeader.js';  // eslint-disable-line no-unused-vars\nimport {ProfilesPanel} from './ProfilesPanel.js';  // eslint-disable-line no-unused-vars\n\nexport class ProfileLauncherView extends UI.Widget.VBox {\n  /**\n   * @param {!ProfilesPanel} profilesPanel\n   */\n  constructor(profilesPanel) {\n    super();\n    this.registerRequiredCSS('profiler/profileLauncherView.css', {enableLegacyPatching: true});\n\n    this._panel = profilesPanel;\n    this.element.classList.add('profile-launcher-view');\n    this._contentElement = this.element.createChild('div', 'profile-launcher-view-content vbox');\n\n    const profileTypeSelectorElement = this._contentElement.createChild('div', 'vbox');\n    this._selectedProfileTypeSetting = Common.Settings.Settings.instance().createSetting('selectedProfileType', 'CPU');\n    this._profileTypeHeaderElement = profileTypeSelectorElement.createChild('h1');\n    this._profileTypeSelectorForm = profileTypeSelectorElement.createChild('form');\n    UI.ARIAUtils.markAsRadioGroup(this._profileTypeSelectorForm);\n\n    const isolateSelectorElement = this._contentElement.createChild('div', 'vbox profile-isolate-selector-block');\n    isolateSelectorElement.createChild('h1').textContent = ls`Select JavaScript VM instance`;\n    const isolateSelector = new IsolateSelector();\n    isolateSelector.show(isolateSelectorElement.createChild('div', 'vbox profile-launcher-target-list'));\n    isolateSelectorElement.appendChild(isolateSelector.totalMemoryElement());\n\n    const buttonsDiv = this._contentElement.createChild('div', 'hbox profile-launcher-buttons');\n    this._controlButton =\n        UI.UIUtils.createTextButton('', this._controlButtonClicked.bind(this), '', /* primary */ true);\n    this._loadButton = UI.UIUtils.createTextButton(ls`Load`, this._loadButtonClicked.bind(this), '');\n    buttonsDiv.appendChild(this._controlButton);\n    buttonsDiv.appendChild(this._loadButton);\n    this._recordButtonEnabled = true;\n\n    /** @type {!Map<string, {optionElement: !HTMLInputElement, profileType: !ProfileType}>} */\n    this._typeIdToOptionElementAndProfileType = new Map();\n  }\n\n  _loadButtonClicked() {\n    this._panel.showLoadFromFileDialog();\n  }\n\n  _updateControls() {\n    if (this._isEnabled && this._recordButtonEnabled) {\n      this._controlButton.removeAttribute('disabled');\n    } else {\n      this._controlButton.setAttribute('disabled', '');\n    }\n    UI.Tooltip.Tooltip.install(\n        this._controlButton, this._recordButtonEnabled ? '' : UI.UIUtils.anotherProfilerActiveLabel());\n    if (this._isInstantProfile) {\n      this._controlButton.classList.remove('running');\n      this._controlButton.classList.add('primary-button');\n      this._controlButton.textContent = Common.UIString.UIString('Take snapshot');\n    } else if (this._isProfiling) {\n      this._controlButton.classList.add('running');\n      this._controlButton.classList.remove('primary-button');\n      this._controlButton.textContent = Common.UIString.UIString('Stop');\n    } else {\n      this._controlButton.classList.remove('running');\n      this._controlButton.classList.add('primary-button');\n      this._controlButton.textContent = Common.UIString.UIString('Start');\n    }\n    for (const {optionElement} of this._typeIdToOptionElementAndProfileType.values()) {\n      optionElement.disabled = Boolean(this._isProfiling);\n    }\n  }\n\n  profileStarted() {\n    this._isProfiling = true;\n    this._updateControls();\n  }\n\n  profileFinished() {\n    this._isProfiling = false;\n    this._updateControls();\n  }\n\n  /**\n   * @param {!ProfileType} profileType\n   * @param {boolean} recordButtonEnabled\n   */\n  updateProfileType(profileType, recordButtonEnabled) {\n    this._isInstantProfile = profileType.isInstantProfile();\n    this._recordButtonEnabled = recordButtonEnabled;\n    this._isEnabled = profileType.isEnabled();\n    this._updateControls();\n  }\n\n  /**\n   * @param {!ProfileType} profileType\n   */\n  addProfileType(profileType) {\n    const labelElement = UI.UIUtils.createRadioLabel('profile-type', profileType.name);\n    this._profileTypeSelectorForm.appendChild(labelElement);\n    const optionElement = labelElement.radioElement;\n    this._typeIdToOptionElementAndProfileType.set(profileType.id, {optionElement, profileType});\n    optionElement.addEventListener('change', this._profileTypeChanged.bind(this, profileType), false);\n    const descriptionElement = this._profileTypeSelectorForm.createChild('p');\n    descriptionElement.textContent = profileType.description;\n    UI.ARIAUtils.setDescription(optionElement, profileType.description);\n    const customContent = profileType.customContent();\n    if (customContent) {\n      this._profileTypeSelectorForm.createChild('p').appendChild(customContent);\n      profileType.setCustomContentEnabled(false);\n    }\n    const headerText =\n        this._typeIdToOptionElementAndProfileType.size > 1 ? ls`Select profiling type` : profileType.name;\n    this._profileTypeHeaderElement.textContent = headerText;\n    UI.ARIAUtils.setAccessibleName(this._profileTypeSelectorForm, headerText);\n  }\n\n  restoreSelectedProfileType() {\n    let typeId = this._selectedProfileTypeSetting.get();\n    if (!this._typeIdToOptionElementAndProfileType.has(typeId)) {\n      typeId = this._typeIdToOptionElementAndProfileType.keys().next().value;\n      this._selectedProfileTypeSetting.set(typeId);\n    }\n\n    const optionElementAndProfileType =\n        /** @type {!{optionElement: !HTMLInputElement, profileType: !ProfileType}} */ (\n            this._typeIdToOptionElementAndProfileType.get(typeId));\n    optionElementAndProfileType.optionElement.checked = true;\n    const type = optionElementAndProfileType.profileType;\n    for (const [id, {profileType}] of this._typeIdToOptionElementAndProfileType) {\n      const enabled = (id === typeId);\n      profileType.setCustomContentEnabled(enabled);\n    }\n    this.dispatchEventToListeners(Events.ProfileTypeSelected, type);\n  }\n\n  _controlButtonClicked() {\n    this._panel.toggleRecord();\n  }\n\n  /**\n   * @param {!ProfileType} profileType\n   */\n  _profileTypeChanged(profileType) {\n    const typeId = this._selectedProfileTypeSetting.get();\n    const type = /** @type {!{optionElement: !HTMLInputElement, profileType: !ProfileType}} */ (\n                     this._typeIdToOptionElementAndProfileType.get(typeId))\n                     .profileType;\n    type.setCustomContentEnabled(false);\n    profileType.setCustomContentEnabled(true);\n    this.dispatchEventToListeners(Events.ProfileTypeSelected, profileType);\n    this._isInstantProfile = profileType.isInstantProfile();\n    this._isEnabled = profileType.isEnabled();\n    this._updateControls();\n    this._selectedProfileTypeSetting.set(profileType.id);\n  }\n}\n\n/** @enum {symbol} */\nexport const Events = {\n  ProfileTypeSelected: Symbol('ProfileTypeSelected')\n};\n"]}