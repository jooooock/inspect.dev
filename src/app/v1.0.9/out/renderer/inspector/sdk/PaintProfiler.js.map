{"version":3,"file":"PaintProfiler.js","sourceRoot":"","sources":["../../../../../front_end/sdk/PaintProfiler.js"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport {Capability, SDKModel, Target} from './SDKModel.js';  // eslint-disable-line no-unused-vars\n\nexport class PaintProfilerModel extends SDKModel {\n  /**\n   * @param {!Target} target\n   */\n  constructor(target) {\n    super(target);\n    this._layerTreeAgent = target.layerTreeAgent();\n  }\n\n  /**\n   * @param {!Array.<!Protocol.LayerTree.PictureTile>} tiles\n   * @return {!Promise<?PaintProfilerSnapshot>}\n   */\n  async loadSnapshotFromFragments(tiles) {\n    const {snapshotId} = await this._layerTreeAgent.invoke_loadSnapshot({tiles});\n    return snapshotId ? new PaintProfilerSnapshot(this, snapshotId) : null;\n  }\n\n  /**\n   * @param {!Protocol.binary} encodedPicture\n   * @return {!Promise<?PaintProfilerSnapshot>}\n   */\n  loadSnapshot(encodedPicture) {\n    const fragment = {x: 0, y: 0, picture: encodedPicture};\n    return this.loadSnapshotFromFragments([fragment]);\n  }\n\n  /**\n   * @param {!Protocol.LayerTree.LayerId} layerId\n   * @return {!Promise<?PaintProfilerSnapshot>}\n   */\n  async makeSnapshot(layerId) {\n    const {snapshotId} = await this._layerTreeAgent.invoke_makeSnapshot({layerId});\n    return snapshotId ? new PaintProfilerSnapshot(this, snapshotId) : null;\n  }\n}\n\nexport class PaintProfilerSnapshot {\n  /**\n   * @param {!PaintProfilerModel} paintProfilerModel\n   * @param {!Protocol.LayerTree.SnapshotId} snapshotId\n   */\n  constructor(paintProfilerModel, snapshotId) {\n    this._paintProfilerModel = paintProfilerModel;\n    this._id = snapshotId;\n    this._refCount = 1;\n  }\n\n  release() {\n    console.assert(this._refCount > 0, 'release is already called on the object');\n    if (!--this._refCount) {\n      this._paintProfilerModel._layerTreeAgent.invoke_releaseSnapshot({snapshotId: this._id});\n    }\n  }\n\n  addReference() {\n    ++this._refCount;\n    console.assert(this._refCount > 0, 'Referencing a dead object');\n  }\n\n  /**\n   * @param {number=} scale\n   * @param {number=} fromStep\n   * @param {number=} toStep\n   * @return {!Promise<?string>}\n   */\n  async replay(scale, fromStep, toStep) {\n    const response = await this._paintProfilerModel._layerTreeAgent.invoke_replaySnapshot(\n        {snapshotId: this._id, fromStep, toStep, scale: scale || 1.0});\n    return response.dataURL;\n  }\n\n  /**\n   * @param {?Protocol.DOM.Rect} clipRect\n   * @return {!Promise<?Array<!Protocol.LayerTree.PaintProfile>>}\n   */\n  async profile(clipRect) {\n    const response = await this._paintProfilerModel._layerTreeAgent.invoke_profileSnapshot(\n        {snapshotId: this._id, minRepeatCount: 5, minDuration: 1, clipRect: clipRect || undefined});\n\n    return response.timings;\n  }\n\n  /**\n   * @return {!Promise<?Array<!PaintProfilerLogItem>>}\n   */\n  async commandLog() {\n    const response = await this._paintProfilerModel._layerTreeAgent.invoke_snapshotCommandLog({snapshotId: this._id});\n\n    return response.commandLog ?\n        response.commandLog.map(\n            (entry, index) => new PaintProfilerLogItem(/** @type {!RawPaintProfilerLogItem} */ (entry), index)) :\n        null;\n  }\n}\n\n\nexport class PaintProfilerLogItem {\n  /**\n   * @param {!RawPaintProfilerLogItem} rawEntry\n   * @param {number} commandIndex\n   */\n  constructor(rawEntry, commandIndex) {\n    this.method = rawEntry.method;\n    this.params = rawEntry.params;\n    this.commandIndex = commandIndex;\n  }\n}\n\nSDKModel.register(PaintProfilerModel, Capability.DOM, false);\n\n/** @typedef {!{\n        rect: !Protocol.DOM.Rect,\n        snapshot: !PaintProfilerSnapshot\n    }}\n*/\n// @ts-ignore typedef\nexport let SnapshotWithRect;\n\n/**\n * @typedef {!{x: number, y: number, picture: string}}\n */\n// @ts-ignore typedef\nexport let PictureFragment;\n\n/**\n * @typedef {!{method: string, params: ?Object<string, *>}}\n */\n// @ts-ignore typedef\nexport let RawPaintProfilerLogItem;\n"]}