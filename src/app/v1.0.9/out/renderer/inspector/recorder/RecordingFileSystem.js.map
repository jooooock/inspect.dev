{"version":3,"file":"RecordingFileSystem.js","sourceRoot":"","sources":["../../../../../front_end/recorder/RecordingFileSystem.js"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as i18n from '../i18n/i18n.js';\nimport * as Persistence from '../persistence/persistence.js';\nimport * as TextUtils from '../text_utils/text_utils.js';  // eslint-disable-line no-unused-vars\nimport * as Workspace from '../workspace/workspace.js';    // eslint-disable-line no-unused-vars\n\nexport const UIStrings = {\n  /**\n  * @description Default name of a new recording\n  * @example {1} nextId\n  */\n  defaultRecordingName: 'Recording #{nextId}',\n  /**\n  * @description Text to show something is linked to another\n  * @example {example.url} PH1\n  */\n  linkedToS: 'Linked to {PH1}',\n};\nconst str_ = i18n.i18n.registerUIStrings('recorder/RecordingFileSystem.js', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n/**\n * @param {string} name\n * @return {string}\n */\nfunction escapeRecordingName(name) {\n  return escape(name);\n}\n\n/**\n * @param {string} name\n * @return {string}\n */\nfunction unescapeRecordingName(name) {\n  return unescape(name);\n}\n\nexport class RecordingFileSystem extends Persistence.PlatformFileSystem.PlatformFileSystem {\n  constructor() {\n    super('recording://', 'recordings');\n    this._lastRecordingIdentifierSetting =\n        Common.Settings.Settings.instance().createSetting('recorder_lastIdentifier', 0);\n    this._recordingsSetting = Common.Settings.Settings.instance().createSetting('recorder_recordings', []);\n  }\n\n  /**\n   * @override\n   * @return {!Array<string>}\n   */\n  initialFilePaths() {\n    /** @type {!Array<!Recording>} */\n    const savedRecordings = this._recordingsSetting.get();\n    return savedRecordings.map(recording => escapeRecordingName(recording.name));\n  }\n\n  /**\n   * @override\n   * @param {string} path\n   * @param {?string} name\n   * @return {!Promise<?string>}\n   */\n  async createFile(path, name) {\n    const nextId = this._lastRecordingIdentifierSetting.get() + 1;\n    this._lastRecordingIdentifierSetting.set(nextId);\n\n    const recordingName = i18nString(UIStrings.defaultRecordingName, {nextId: nextId});\n    const recordings = this._recordingsSetting.get();\n    recordings.push({name: recordingName, content: '{\"steps\": []}'});\n    this._recordingsSetting.set(recordings);\n\n    return escapeRecordingName(recordingName);\n  }\n\n  /**\n   * @override\n   * @param {string} path\n   * @return {!Promise<boolean>}\n   */\n  async deleteFile(path) {\n    const name = unescapeRecordingName(path.substring(1));\n    /** @type {!Array<!Recording>} */\n    const allRecordings = this._recordingsSetting.get();\n    const recordings = allRecordings.filter(recording => recording.name !== name);\n    if (allRecordings.length !== recordings.length) {\n      this._recordingsSetting.set(recordings);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @override\n   * @param {string} path\n   * @returns {!Promise<!TextUtils.ContentProvider.DeferredContent>}\n   */\n  async requestFileContent(path) {\n    const name = unescapeRecordingName(path.substring(1));\n    /** @type {!Array<!Recording>} */\n    const recordings = this._recordingsSetting.get();\n    const recording = recordings.find(recording => recording.name === name);\n    if (recording) {\n      return {content: recording.content, isEncoded: false};\n    }\n    return {content: null, isEncoded: false, error: `A recording with name '${name}' was not found`};\n  }\n\n  /**\n   * @override\n   * @param {string} path\n   * @param {string} content\n   * @param {boolean} isBase64\n   */\n  async setFileContent(path, content, isBase64) {\n    const name = unescapeRecordingName(path.substring(1));\n    /** @type {!Array<!Recording>} */\n    const recordings = this._recordingsSetting.get();\n    const recording = recordings.find(recording => recording.name === name);\n    if (recording) {\n      recording.content = content;\n      this._recordingsSetting.set(recordings);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @override\n   * @param {string} path\n   * @param {string} newName\n   * @param {function(boolean, string=):void} callback\n   */\n  renameFile(path, newName, callback) {\n    const name = unescapeRecordingName(path.substring(1));\n    /** @type {!Array<!Recording>} */\n    const recordings = this._recordingsSetting.get();\n    const recording = recordings.find(recording => recording.name === name);\n    newName = newName.trim();\n    if (!recording || newName.length === 0 || recordings.find(recording => recording.name === newName)) {\n      callback(false);\n      return;\n    }\n    recording.name = newName;\n    this._recordingsSetting.set(recordings);\n    callback(true, newName);\n  }\n\n  /**\n   * @override\n   * @param {string} query\n   * @param {!Common.Progress.Progress} progress\n   * @return {!Promise<!Array<string>>}\n   */\n  async searchInPath(query, progress) {\n    const re = new RegExp(query.escapeForRegExp(), 'i');\n    /** @type {!Array<!Recording>} */\n    const allRecordings = this._recordingsSetting.get();\n    const matchedRecordings = allRecordings.filter(recording => recording.content.match(re));\n    return matchedRecordings.map(recording => `recording:///${escapeRecordingName(recording.name)}`);\n  }\n\n  /**\n   * @override\n   * @param {string} path\n   * @return {string}\n   */\n  mimeFromPath(path) {\n    return 'text/javascript';\n  }\n\n  /**\n   * @override\n   * @param {string} path\n   * @return {!Common.ResourceType.ResourceType}\n   */\n  contentType(path) {\n    return Common.ResourceType.resourceTypes.Script;\n  }\n\n  /**\n   * @override\n   * @param {string} url\n   * @return {string}\n   */\n  tooltipForURL(url) {\n    return i18nString(UIStrings.linkedToS, {PH1: unescapeRecordingName(url.substring(this.path().length))});\n  }\n\n  /**\n   * @override\n   * @return {boolean}\n   */\n  supportsAutomapping() {\n    return true;\n  }\n}\n\n/**\n * @param {!Workspace.UISourceCode.UISourceCode} uiSourceCode\n * @return {boolean}\n */\nexport function isRecordingUISourceCode(uiSourceCode) {\n  return uiSourceCode.url().startsWith('recording://');\n}\n\n/**\n * @param {!Workspace.Workspace.Project} project\n * @return {boolean}\n */\nexport function isRecordingProject(project) {\n  return project.type() === Workspace.Workspace.projectTypes.FileSystem &&\n      Persistence.FileSystemWorkspaceBinding.FileSystemWorkspaceBinding.fileSystemType(project) === 'recordings';\n}\n\n/**\n * @return {!Workspace.Workspace.Project}\n * */\nexport function findRecordingsProject() {\n  const workspace = Workspace.Workspace.WorkspaceImpl.instance();\n  const projects = workspace.projectsForType(Workspace.Workspace.projectTypes.FileSystem);\n  const project = projects.find(project => {\n    const type = Persistence.FileSystemWorkspaceBinding.FileSystemWorkspaceBinding.fileSystemType(project);\n    return type === 'recordings';\n  });\n  if (!project) {\n    throw new Error('Unable to find workspace project for the recordings file system.');\n  }\n  return project;\n}\n\n/**\n* @typedef {{\n  * name:string,\n  * content:string,\n  * }}\n  */\n// @ts-ignore typedef\nexport let Recording;\n"]}