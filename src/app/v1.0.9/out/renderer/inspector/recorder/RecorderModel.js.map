{"version":3,"file":"RecorderModel.js","sourceRoot":"","sources":["../../../../../front_end/recorder/RecorderModel.js"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,GAAG,MAAM,eAAe,CAAC;AACrC,OAAO,KAAK,EAAE,MAAM,aAAa,CAAC;AAGlC,OAAO,EAAC,gBAAgB,EAAC,MAAM,uBAAuB,CAAC;AAEvD;;GAEG;AACH,MAAM,aAAa,GAAG;IACpB,SAAS,EAAE,MAAM,CAAC,WAAW,CAAC;IAC9B,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC;CACrB,CAAC;AAEF,MAAM,OAAO,aAAc,SAAQ,GAAG,CAAC,QAAQ,CAAC,QAAQ;IACtD;;MAEE;IACF,YAAY,MAAM;QAChB,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,aAAa,EAAE,CAAC;QAC7C,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,gBAAgB,EAAE,CAAC;QACnD,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;QAC3C,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,kBAAkB,EAAE,CAAC;QAEvD,2CAA2C;QAC3C,IAAI,CAAC,mBAAmB,GAAG,2CAA2C,CAAC,CACnE,EAAE,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,2BAA2B,CAAC,CAAC,CAAC;QAErF,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,IAAI,CAAC;QACjC,gCAAgC;QAChC,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;IACvC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,WAAW,CAAC,QAAQ;QACxB,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;QACvB,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,KAAK,aAAa,CAAC,SAAS,CAAC,CAAC;IAC/E,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,MAAM,KAAK,aAAa,CAAC,SAAS,CAAC;IACjD,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,eAAe,CAAC,YAAY;QAChC,IAAI,IAAI,CAAC,MAAM,KAAK,aAAa,CAAC,IAAI,EAAE;YACtC,MAAM,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;YACxC,MAAM,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;SACjD;aAAM,IAAI,IAAI,CAAC,MAAM,KAAK,aAAa,CAAC,SAAS,EAAE;YAClD,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;YAC3B,MAAM,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;SAC5C;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,cAAc,CAAC,YAAY;QAC/B,IAAI,CAAC,wBAAwB,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,YAAY,CAAC,CAAC;QAClF,MAAM,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,CAAC;IAC9C,CAAC;IAED,KAAK,CAAC,aAAa;QACjB,IAAI,CAAC,IAAI,CAAC,wBAAwB,EAAE;YAClC,OAAO;SACR;QAED,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,CAAC;QACrC,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;IACvC,CAAC;CACF;AAED,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,aAAa,EAAE,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../sdk/sdk.js';\nimport * as UI from '../ui/ui.js';\nimport * as Workspace from '../workspace/workspace.js';  // eslint-disable-line no-unused-vars\n\nimport {RecordingSession} from './RecordingSession.js';\n\n/**\n * @enum {symbol}\n */\nconst RecorderState = {\n  Recording: Symbol('Recording'),\n  Idle: Symbol('Idle'),\n};\n\nexport class RecorderModel extends SDK.SDKModel.SDKModel {\n  /**\n  * @param {!SDK.SDKModel.Target} target\n  */\n  constructor(target) {\n    super(target);\n    this._debuggerAgent = target.debuggerAgent();\n    this._domDebuggerAgent = target.domdebuggerAgent();\n    this._runtimeAgent = target.runtimeAgent();\n    this._accessibilityAgent = target.accessibilityAgent();\n\n    /** @type {!UI.ActionRegistration.Action}*/\n    this._toggleRecordAction = /** @type {!UI.ActionRegistration.Action}*/ (\n        UI.ActionRegistry.ActionRegistry.instance().action('recorder.toggle-recording'));\n\n    this._state = RecorderState.Idle;\n    /** @type {?RecordingSession} */\n    this._currentRecordingSession = null;\n  }\n\n  /**\n   * @param {!RecorderState} newState\n   */\n  async updateState(newState) {\n    this._state = newState;\n    this._toggleRecordAction.setToggled(this._state === RecorderState.Recording);\n  }\n\n  isRecording() {\n    return this._state === RecorderState.Recording;\n  }\n\n  /**\n   * @param {!Workspace.UISourceCode.UISourceCode} uiSourceCode\n   */\n  async toggleRecording(uiSourceCode) {\n    if (this._state === RecorderState.Idle) {\n      await this.startRecording(uiSourceCode);\n      await this.updateState(RecorderState.Recording);\n    } else if (this._state === RecorderState.Recording) {\n      await this.stopRecording();\n      await this.updateState(RecorderState.Idle);\n    }\n  }\n\n  /**\n   * @param {!Workspace.UISourceCode.UISourceCode} uiSourceCode\n   */\n  async startRecording(uiSourceCode) {\n    this._currentRecordingSession = new RecordingSession(this.target(), uiSourceCode);\n    await this._currentRecordingSession.start();\n  }\n\n  async stopRecording() {\n    if (!this._currentRecordingSession) {\n      return;\n    }\n\n    this._currentRecordingSession.stop();\n    this._currentRecordingSession = null;\n  }\n}\n\nSDK.SDKModel.SDKModel.register(RecorderModel, SDK.SDKModel.Capability.None, false);\n"]}