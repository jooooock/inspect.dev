"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const crypto = require("crypto");
const electron_1 = require("electron");
const http = require("http");
const version_1 = require("./version");
function getCallStack() {
    const stackLines = new Error().stack
        .split("\n")
        .map((line) => line.trim().replace(/^at /, " - "));
    return stackLines.slice(3).join("\n");
}
function sendHttpRequest(url, body) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            const request = http.request(url, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
            }, (res) => {
                if (res.statusCode === 200) {
                    const chunks = [];
                    res.on("data", (chunk) => chunks.push(chunk));
                    res.on("error", reject);
                    res.on("end", () => {
                        resolve(JSON.parse(Buffer.concat(chunks).toString("utf8")));
                    });
                }
                else {
                    reject(new Error(`POST ${url} returns status code ${res.statusCode}`));
                }
            });
            request.on("error", reject);
            request.write(JSON.stringify(body));
            request.end();
        });
    });
}
// Looks like there is no a better way. No event emitted on write
function patchWritableWrite(writable, handler) {
    const originalWrite = writable.write.bind(writable);
    writable.write = (chunk, ...rest) => {
        if (chunk) {
            handler(typeof chunk === "string" ? chunk : chunk.toString("utf8"));
        }
        return originalWrite(chunk, ...rest);
    };
}
function sha256(input) {
    const stringInput = typeof input === "string" ? input : "";
    return crypto.createHash("sha256").update(stringInput).digest("hex");
}
function initSmokeTest(toDesktop) {
    var _a, _b;
    const SECRET_HASH = "f9963eac07c447dfd6dad6c52dbd3d7afd546060992f301d9fd3637c9833450d";
    let configFromEnv;
    try {
        configFromEnv = JSON.parse(process.env.TODESKTOP_SMOKE_TEST_CONFIG || "{}");
    }
    catch (_c) {
        configFromEnv = {};
    }
    const config = Object.assign({ apiUrl: process.env.TODESKTOP_SMOKE_TEST_API_URL || "", autoRestart: true, enabled: Boolean(process.env.TODESKTOP_SMOKE_TEST), feedUrl: process.env.TODESKTOP_SMOKE_TEST_FEED_URL || "", initOptions: {}, secret: process.env.TODESKTOP_SMOKE_TEST_SECRET || "", startedAtMs: Date.now() }, configFromEnv);
    function callApi(event, data = {}) {
        sendHttpRequest(config.apiUrl, Object.assign({ event }, data)).catch((e) => {
            console.error("Smoke Test API:", e);
        });
    }
    if (!config.enabled ||
        !config.apiUrl ||
        sha256(config.secret) !== SECRET_HASH) {
        return;
    }
    // auto-update is required even if it's disabled by a client application
    const autoUpdater = toDesktop._init(Object.assign(Object.assign({}, config.initOptions), { 
        // Add time to log
        customLogger: new Proxy(console, {
            get(target, method) {
                return (toDesktopPrefix, ...args) => {
                    const time = new Date().toISOString().slice(11, 23);
                    target[method](toDesktopPrefix, time, ...args);
                };
            },
        }) }));
    (_b = (_a = toDesktop.autoUpdater) === null || _a === void 0 ? void 0 : _a.setRealAutoUpdater) === null || _b === void 0 ? void 0 : _b.call(_a, autoUpdater);
    if (config.feedUrl) {
        autoUpdater.setFeedURL(config.feedUrl);
    }
    autoUpdater
        .on("update-downloaded", (payload) => {
        callApi("updateDownloaded", { payload });
        if (config.autoRestart) {
            autoUpdater.restartAndInstall();
        }
    })
        .on("before-quit-for-update", (payload) => {
        callApi("beforeQuitForUpdate", { payload });
    });
    process
        .on("uncaughtException", (e) => {
        callApi("uncaughtException", { stack: e.stack });
    })
        .on("unhandledRejection", (reason) => {
        callApi("unhandledRejection", { reason });
    });
    const originalProcessExit = process.exit;
    process.exit = function patchedProcessExit(code = 0) {
        callApi("processExit", { code, stack: getCallStack() });
        return originalProcessExit(code);
    };
    const originalAppQuit = electron_1.app.quit;
    electron_1.app.quit = function patchedAppQuit() {
        callApi("appQuit", { stack: getCallStack() });
        originalAppQuit();
    };
    patchWritableWrite(process.stdout, (content) => {
        callApi("stdout", { content });
    });
    patchWritableWrite(process.stderr, (content) => {
        callApi("stderr", { content });
    });
    callApi("connect", {
        appVersion: electron_1.app.getVersion(),
        runtimeVersion: version_1.CLIENT_VERSION,
    });
    setInterval(() => {
        callApi("timer", { fromStartMs: Date.now() - config.startedAtMs });
    }, 1000);
}
exports.default = initSmokeTest;
