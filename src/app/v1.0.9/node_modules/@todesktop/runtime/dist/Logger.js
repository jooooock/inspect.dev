"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Logger {
    constructor(customLogger) {
        this._customLogger = customLogger;
        // WARNING: Leave this commented because it breaks Webpack's static analysis
        // this._diskLogger = this._initializeDiskLogger();
    }
    debug(...args) {
        this._log("debug", ...args);
    }
    error(...args) {
        this._log("error", ...args);
    }
    info(...args) {
        this._log("info", ...args);
    }
    warn(...args) {
        this._log("warn", ...args);
    }
    /*
    // WARNING: Leave this commented because it breaks Webpack's static analysis
  
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    private _initializeDiskLogger(): any {
      // Needs to be any because winston is only imported in dev/test
      // eslint-disable-next-line @typescript-eslint/no-var-requires
      const winston = require("winston");
  
      const baseTransports = [
        // - Write all logs with level `error` and below to `error.log`
        // - Write all logs with level `info` and below to `combined.log`
        new winston.transports.File({ filename: "error.log", level: "error" }),
        new winston.transports.File({ filename: "combined.log" }),
      ];
  
      const extraTransports = [];
  
      if (process.env.CI && this._shouldDebugOnCI) {
        extraTransports.push(
          new winston.transports.Console({ format: winston.format.simple() })
        );
      }
  
      return winston.createLogger({
        level: "info",
        format: winston.format.json(),
        transports: [...baseTransports, ...extraTransports],
      });
    }
    */
    _log(level, ...args) {
        const adjustedArguments = ["@todesktop/runtime:", ...args];
        if (process.env.DEBUG && process.env.DEBUG.includes("@todesktop/runtime")) {
            console[level](...adjustedArguments);
        }
        if (this._diskLogger) {
            this._diskLogger[level](...adjustedArguments);
        }
        if (this._customLogger && this._customLogger[level]) {
            this._customLogger[level](...adjustedArguments);
        }
    }
}
exports.default = Logger;
