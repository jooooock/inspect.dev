"use strict";
const AutoUpdater_1 = require("./AutoUpdater");
const cache_1 = require("./cache");
const Logger_1 = require("./Logger");
const MockedAutoUpdater_1 = require("./MockedAutoUpdater");
const Notifier_1 = require("./Notifier");
class ToDesktop {
    constructor() {
        this.isSmokeTestMode = Boolean(process.env.TODESKTOP_SMOKE_TEST);
    }
    // This initializes everything. It must be called (at the top of their main script)
    init(params = {}) {
        if (this.isSmokeTestMode) {
            this.autoUpdater = (0, MockedAutoUpdater_1.createMockedAutoUpdater)();
        }
        else {
            this.autoUpdater = this._init(params);
        }
    }
    _init({ autoUpdater = true, customLogger, updateReadyAction, } = {}) {
        const logger = new Logger_1.default(customLogger);
        let autoUpdaterInstance;
        if (autoUpdater) {
            autoUpdaterInstance = new AutoUpdater_1.default({ logger });
            new Notifier_1.default({
                autoUpdater: autoUpdaterInstance,
                updateReadyAction,
            });
        }
        else {
            // Disables the default behaviour
            autoUpdaterInstance = new AutoUpdater_1.default({
                autoCheckInterval: 0,
                logger,
                shouldAutoCheckOnLaunch: false,
            });
        }
        return autoUpdaterInstance;
    }
}
let todesktop;
if (cache_1.default.get()) {
    todesktop = cache_1.default.get();
}
else {
    todesktop = new ToDesktop();
    cache_1.default.set(todesktop);
}
if (todesktop.isSmokeTestMode) {
    Promise.resolve().then(() => require("./initSmokeTest")).then(({ default: initSmokeTest }) => initSmokeTest(todesktop))
        .catch(() => {
        // Ignore
    });
}
module.exports = todesktop;
