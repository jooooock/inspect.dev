"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMockedAutoUpdater = exports.MockedAutoUpdater = void 0;
const eventemitter2_1 = require("eventemitter2");
class MockedAutoUpdater extends eventemitter2_1.EventEmitter2 {
    constructor(logFn = console.info) {
        super();
        this.logFn = logFn;
    }
    setRealAutoUpdater(autoUpdater) {
        autoUpdater.onAny((eventName, ...args) => {
            this.emit(eventName, ...args);
        });
    }
    checkForUpdates(...args) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logCall("checkForUpdates()", args);
            return { updateInfo: null };
        });
    }
    restartAndInstall(...args) {
        this.logCall("restartAndInstall()", args);
    }
    setFeedURL(...args) {
        this.logCall("setFeedURL()", args);
    }
    logCall(method, args = []) {
        const time = new Date().toISOString().slice(11, 23);
        this.logFn(time, `MockedAutoUpdater.${method} called with args`, args);
    }
}
exports.MockedAutoUpdater = MockedAutoUpdater;
function createMockedAutoUpdater() {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return new MockedAutoUpdater();
}
exports.createMockedAutoUpdater = createMockedAutoUpdater;
